"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const report_entity_1 = require("./report.entity");
const article_service_1 = require("../article/article.service");
const sector_service_1 = require("../sector/sector.service");
const openrouter_service_1 = require("./openrouter.service");
const crypto = require("crypto");
let ReportService = class ReportService {
    reportRepository;
    articleService;
    sectorService;
    openRouterService;
    constructor(reportRepository, articleService, sectorService, openRouterService) {
        this.reportRepository = reportRepository;
        this.articleService = articleService;
        this.sectorService = sectorService;
        this.openRouterService = openRouterService;
    }
    async onModuleInit() {
        try {
            console.log('Database connected successfully');
            await this.reportRepository.query('SELECT 1');
            console.log('Database connected successfully');
        }
        catch (error) {
            console.error('Database connection error:', error);
        }
    }
    async create(content) {
        const report = this.reportRepository.create({ content });
        return this.reportRepository.save(report);
    }
    async findAll() {
        return this.reportRepository.find();
    }
    async generateSummaryBySector(sectorId) {
        const sector = await this.sectorService.findById(sectorId);
        const sectorName = sector ? sector.name : `–°–µ–∫—Ç–æ—Ä ${sectorId}`;
        const articles = await this.articleService.findAll();
        console.log(articles);
        const filteredArticles = articles.filter(article => article.sectors.includes(sectorId));
        if (filteredArticles.length === 0) {
            return `No articles found for sector "${sectorName}" (ID: ${sectorId})`;
        }
        const promptParts = filteredArticles.map(article => `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏: ${article.title}\n–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏: ${article.content}`);
        const prompt = `–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—å—è–º —Å–µ–∫—Ç–æ—Ä–∞ "${sectorName}" –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

    1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –∂–∏—Ä–Ω—ã–º –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ # (–ø—Ä–æ—Å—Ç–æ **–ó–∞–≥–æ–ª–æ–≤–æ–∫**)
    2. –°–ø–∏—Å–∫–∏ - —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    3. –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã - –∂–∏—Ä–Ω—ã–º
    4. –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Ä–µ–Ω–Ω–æ (1-3 –Ω–∞ –±–ª–æ–∫)
    5. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    6. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ *, ### –∏ —Ç.–¥.
    7. –î–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
    
    –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è:
    
    **üî• –°–≤–æ–¥–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ | ${sectorName}**
    
    [–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏/–∫–æ–º–ø–∞–Ω–∏–∏] [—ç–º–æ–¥–∑–∏]
    - –°—É—Ç—å: –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    - –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫: 
      - üü¢ –ü–æ–∑–∏—Ç–∏–≤ –¥–ª—è: [–∫–æ–º–ø–∞–Ω–∏–∏/—Å–µ–∫—Ç–æ—Ä–∞]
      - üî¥ –ù–µ–≥–∞—Ç–∏–≤ –¥–ª—è: [–∫–æ–º–ø–∞–Ω–∏–∏/—Å–µ–∫—Ç–æ—Ä–∞]
    - –¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è] [—ç–º–æ–¥–∑–∏]
    
    [–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏]
    
    –í–æ—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    ${promptParts.join('\n\n')}`;
        const summary = await this.openRouterService.generateResponse(prompt);
        return summary;
    }
    async generateDailySummaryReport() {
        const twelveHoursAgo = new Date();
        twelveHoursAgo.setHours(twelveHoursAgo.getHours() - 12);
        const recentArticles = await this.articleService.findRecentArticles(twelveHoursAgo);
        if (recentArticles.length === 0) {
            const emptyReport = await this.createReport('–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üì≠', 'daily_summary', null, twelveHoursAgo, new Date(), 'empty');
            return emptyReport;
        }
        const articlesHash = this.createArticlesHash(recentArticles);
        const existingReport = await this.reportRepository.findOne({
            where: {
                reportType: 'daily_summary',
                articlesHash: articlesHash,
                timeRangeStart: (0, typeorm_2.MoreThan)(twelveHoursAgo),
            },
            order: { creationTime: 'DESC' }
        });
        if (existingReport) {
            console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ');
            return existingReport;
        }
        const sectorNamesMap = await this.sectorService.getSectorNamesMap();
        const articlesBySector = this.groupArticlesBySectors(recentArticles);
        const megaPrompt = this.createMegaPrompt(articlesBySector, sectorNamesMap);
        const fullSummary = await this.openRouterService.generateResponse(megaPrompt);
        const reportContent = this.formatDailySummaryFromMegaResponse(fullSummary, articlesBySector, sectorNamesMap, recentArticles.length);
        const report = await this.createReport(reportContent, 'daily_summary', null, twelveHoursAgo, new Date(), articlesHash);
        return report;
    }
    async getDailySummaryReport() {
        const twelveHoursAgo = new Date();
        twelveHoursAgo.setHours(twelveHoursAgo.getHours() - 12);
        const existingReport = await this.reportRepository.findOne({
            where: {
                reportType: 'daily_summary',
                creationTime: (0, typeorm_2.MoreThan)(twelveHoursAgo),
            },
            order: { creationTime: 'DESC' }
        });
        if (existingReport) {
            return existingReport;
        }
        return await this.generateDailySummaryReport();
    }
    async createReport(content, reportType, sectorId, timeRangeStart, timeRangeEnd, articlesHash) {
        const report = this.reportRepository.create({
            content,
            reportType,
            sectorId: sectorId || undefined,
            timeRangeStart,
            timeRangeEnd,
            articlesHash
        });
        return await this.reportRepository.save(report);
    }
    createArticlesHash(articles) {
        const articleIds = articles.map(article => article.id).sort().join(',');
        return crypto.createHash('md5').update(articleIds).digest('hex');
    }
    groupArticlesBySectors(articles) {
        const articlesBySector = {};
        articles.forEach(article => {
            if (article.sectors && Array.isArray(article.sectors)) {
                article.sectors.forEach(sectorId => {
                    if (!articlesBySector[sectorId]) {
                        articlesBySector[sectorId] = [];
                    }
                    articlesBySector[sectorId].push(article);
                });
            }
        });
        return articlesBySector;
    }
    createMegaPrompt(articlesBySector, sectorNamesMap) {
        let megaPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. 
–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å —ç–º–æ–¥–∂–∏, –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å "–°–ï–ö–¢–û–†: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞]" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π "---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---".

–í–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:\n\n`;
        Object.entries(articlesBySector).forEach(([sectorId, articles]) => {
            const sectorName = sectorNamesMap.get(parseInt(sectorId)) || `–°–µ–∫—Ç–æ—Ä ${sectorId}`;
            megaPrompt += `\nüè¢ === –°–ï–ö–¢–û–†: ${sectorName.toUpperCase()} (${articles.length} —Å—Ç–∞—Ç–µ–π) ===\n`;
            articles.forEach((article, index) => {
                megaPrompt += `\n–°—Ç–∞—Ç—å—è ${index + 1}:\n`;
                megaPrompt += `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n`;
                megaPrompt += `–¢–µ–∫—Å—Ç: ${article.content}\n`;
            });
            megaPrompt += `\n=== –ö–û–ù–ï–¶ –î–ê–ù–ù–´–• –ü–û –°–ï–ö–¢–û–†–£ ${sectorName.toUpperCase()} ===\n\n`;
        });
        megaPrompt += `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∞—Ç–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å "–°–ï–ö–¢–û–†: [–ù–∞–∑–≤–∞–Ω–∏–µ]" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è "---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---".`;
        return megaPrompt;
    }
    formatDailySummaryFromMegaResponse(megaResponse, articlesBySector, sectorNamesMap, totalArticles) {
        const timestamp = new Date().toLocaleString('ru-RU');
        let report = `üìä *–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π* üìä\n`;
        report += `üïê –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: ${timestamp}\n`;
        report += `üì∞ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}\n`;
        report += `üè¢ –û—Ö–≤–∞—á–µ–Ω–æ —Å–µ–∫—Ç–æ—Ä–æ–≤: ${Object.keys(articlesBySector).length}\n\n`;
        const sectorResponses = this.parseMegaResponse(megaResponse);
        Object.entries(articlesBySector).forEach(([sectorId, articles]) => {
            const sectorName = sectorNamesMap.get(parseInt(sectorId)) || `–°–µ–∫—Ç–æ—Ä ${sectorId}`;
            const sectorSummary = sectorResponses[sectorName] ||
                sectorResponses[sectorName.toUpperCase()] ||
                `–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–∫—Ç–æ—Ä—É ${sectorName} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üîÑ`;
            report += `üè¢ *${sectorName}* (${articles.length} —Å—Ç–∞—Ç–µ–π)\n`;
            report += `${sectorSummary}\n\n`;
            report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
        });
        report += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ!\n`;
        return report;
    }
    parseMegaResponse(megaResponse) {
        const sectorResponses = {};
        const sectorRegex = /–°–ï–ö–¢–û–†:\s*([^]+?)---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---/gi;
        let match;
        while ((match = sectorRegex.exec(megaResponse)) !== null) {
            const fullMatch = match[1];
            const lines = fullMatch.split('\n');
            if (lines.length > 0) {
                const sectorName = lines[0].trim();
                const content = lines.slice(1).join('\n').trim();
                if (sectorName && content) {
                    sectorResponses[sectorName] = content;
                }
            }
        }
        return sectorResponses;
    }
};
exports.ReportService = ReportService;
exports.ReportService = ReportService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(report_entity_1.Report)),
    __metadata("design:paramtypes", [typeorm_2.Repository,
        article_service_1.ArticleService,
        sector_service_1.SectorService,
        openrouter_service_1.OpenRouterService])
], ReportService);
//# sourceMappingURL=report.service.js.map