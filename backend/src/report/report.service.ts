import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, MoreThan } from 'typeorm';
import { Report } from './report.entity';
import { ArticleService } from 'src/article/article.service';
import { SectorService } from 'src/sector/sector.service';
import { OpenRouterService } from './openrouter.service';
import * as crypto from 'crypto';

@Injectable()
export class ReportService implements OnModuleInit {
  constructor(
    @InjectRepository(Report)
    private reportRepository: Repository<Report>,
    private readonly articleService: ArticleService,
    private readonly sectorService: SectorService,
    private readonly openRouterService: OpenRouterService,
  ) {}

  async onModuleInit() {
    try {
      console.log('Database connected successfully');
      await this.reportRepository.query('SELECT 1');
      console.log('Database connected successfully');
    } catch (error) {
      console.error('Database connection error:', error);
    }
  }

  async create(content: string): Promise<Report> {
    const report = this.reportRepository.create({ content });
    return this.reportRepository.save(report);
  }

  async findAll(): Promise<Report[]> {
    return this.reportRepository.find();
  }

  async generateSummaryBySector(sectorId: number): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞
    const sector = await this.sectorService.findById(sectorId);
    const sectorName = sector ? sector.name : `–°–µ–∫—Ç–æ—Ä ${sectorId}`;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–µ–∫—Ç–æ—Ä—É
    const articles = await this.articleService.findAll();
    console.log(articles);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ sectorId
    const filteredArticles = articles.filter(article =>
      article.sectors.includes(sectorId),
    );

    if (filteredArticles.length === 0) {
      return `No articles found for sector "${sectorName}" (ID: ${sectorId})`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ç–æ—Ä–∞
    const promptParts = filteredArticles.map(
      article => `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏: ${article.title}\n–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏: ${article.content}`,
    );

    const prompt = `–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—å—è–º —Å–µ–∫—Ç–æ—Ä–∞ "${sectorName}" –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

    1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –∂–∏—Ä–Ω—ã–º –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ # (–ø—Ä–æ—Å—Ç–æ **–ó–∞–≥–æ–ª–æ–≤–æ–∫**)
    2. –°–ø–∏—Å–∫–∏ - —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    3. –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã - –∂–∏—Ä–Ω—ã–º
    4. –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Ä–µ–Ω–Ω–æ (1-3 –Ω–∞ –±–ª–æ–∫)
    5. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    6. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ *, ### –∏ —Ç.–¥.
    7. –î–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
    
    –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è:
    
    **üî• –°–≤–æ–¥–∫–∞ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞ | ${sectorName}**
    
    [–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏/–∫–æ–º–ø–∞–Ω–∏–∏] [—ç–º–æ–¥–∑–∏]
    - –°—É—Ç—å: –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    - –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫: 
      - üü¢ –ü–æ–∑–∏—Ç–∏–≤ –¥–ª—è: [–∫–æ–º–ø–∞–Ω–∏–∏/—Å–µ–∫—Ç–æ—Ä–∞]
      - üî¥ –ù–µ–≥–∞—Ç–∏–≤ –¥–ª—è: [–∫–æ–º–ø–∞–Ω–∏–∏/—Å–µ–∫—Ç–æ—Ä–∞]
    - –¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è] [—ç–º–æ–¥–∑–∏]
    
    [–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏]
    
    –í–æ—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
    ${promptParts.join('\n\n')}`;
    
    // –í—ã–∑—ã–≤–∞–µ–º OpenRouterService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏
    const summary = await this.openRouterService.generateResponse(prompt);
    return summary;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–µ–∫—Ç–æ—Ä–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
   * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
   */
  async generateDailySummaryReport(): Promise<Report> {
    const twelveHoursAgo = new Date();
    twelveHoursAgo.setHours(twelveHoursAgo.getHours() - 12);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
    const recentArticles = await this.articleService.findRecentArticles(twelveHoursAgo);

    if (recentArticles.length === 0) {
      const emptyReport = await this.createReport(
        '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üì≠',
        'daily_summary',
        null,
        twelveHoursAgo,
        new Date(),
        'empty'
      );
      return emptyReport;
    }

    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π
    const articlesHash = this.createArticlesHash(recentArticles);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π
    const existingReport = await this.reportRepository.findOne({
      where: {
        reportType: 'daily_summary',
        articlesHash: articlesHash,
        timeRangeStart: MoreThan(twelveHoursAgo),
      },
      order: { creationTime: 'DESC' }
    });

    if (existingReport) {
      console.log('–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ');
      return existingReport;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
    const sectorNamesMap = await this.sectorService.getSectorNamesMap();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
    const articlesBySector = this.groupArticlesBySectors(recentArticles);

    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
    const megaPrompt = this.createMegaPrompt(articlesBySector, sectorNamesMap);

    // –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ OpenRouter –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
    const fullSummary = await this.openRouterService.generateResponse(megaPrompt);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const reportContent = this.formatDailySummaryFromMegaResponse(
      fullSummary, 
      articlesBySector, 
      sectorNamesMap, 
      recentArticles.length
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const report = await this.createReport(
      reportContent,
      'daily_summary',
      null,
      twelveHoursAgo,
      new Date(),
      articlesHash
    );

    return report;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π
   */
  async getDailySummaryReport(): Promise<Report> {
    const twelveHoursAgo = new Date();
    twelveHoursAgo.setHours(twelveHoursAgo.getHours() - 12);

    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤
    const existingReport = await this.reportRepository.findOne({
      where: {
        reportType: 'daily_summary',
        creationTime: MoreThan(twelveHoursAgo),
      },
      order: { creationTime: 'DESC' }
    });

    if (existingReport) {
      return existingReport;
    }

    // –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    return await this.generateDailySummaryReport();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async createReport(
    content: string,
    reportType: string,
    sectorId?: number | null,
    timeRangeStart?: Date,
    timeRangeEnd?: Date,
    articlesHash?: string
  ): Promise<Report> {
    const report = this.reportRepository.create({
      content,
      reportType,
      sectorId: sectorId || undefined,
      timeRangeStart,
      timeRangeEnd,
      articlesHash
    });

    return await this.reportRepository.save(report);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö–µ—à –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π
   */
  private createArticlesHash(articles: any[]): string {
    const articleIds = articles.map(article => article.id).sort().join(',');
    return crypto.createHash('md5').update(articleIds).digest('hex');
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
   */
  private groupArticlesBySectors(articles: any[]): Record<string, any[]> {
    const articlesBySector: Record<string, any[]> = {};

    articles.forEach(article => {
      if (article.sectors && Array.isArray(article.sectors)) {
        article.sectors.forEach(sectorId => {
          if (!articlesBySector[sectorId]) {
            articlesBySector[sectorId] = [];
          }
          articlesBySector[sectorId].push(article);
        });
      }
    });

    return articlesBySector;
  }

  /**
   * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –º–µ–≥–∞-–ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
   */
  private createMegaPrompt(
    articlesBySector: Record<string, any[]>, 
    sectorNamesMap: Map<number, string>
  ): string {
    let megaPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. 
–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞ —Å —ç–º–æ–¥–∂–∏, –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å "–°–ï–ö–¢–û–†: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞]" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π "---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---".

–í–æ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:\n\n`;

    Object.entries(articlesBySector).forEach(([sectorId, articles]) => {
      const sectorName = sectorNamesMap.get(parseInt(sectorId)) || `–°–µ–∫—Ç–æ—Ä ${sectorId}`;
      
      megaPrompt += `\nüè¢ === –°–ï–ö–¢–û–†: ${sectorName.toUpperCase()} (${articles.length} —Å—Ç–∞—Ç–µ–π) ===\n`;
      
      articles.forEach((article, index) => {
        megaPrompt += `\n–°—Ç–∞—Ç—å—è ${index + 1}:\n`;
        megaPrompt += `–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${article.title}\n`;
        megaPrompt += `–¢–µ–∫—Å—Ç: ${article.content}\n`;
      });
      
      megaPrompt += `\n=== –ö–û–ù–ï–¶ –î–ê–ù–ù–´–• –ü–û –°–ï–ö–¢–û–†–£ ${sectorName.toUpperCase()} ===\n\n`;
    });

    megaPrompt += `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ –∫—Ä–∞—Ç–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–≤–æ–¥–∫—É, –Ω–∞—á–∏–Ω–∞—è —Å "–°–ï–ö–¢–û–†: [–ù–∞–∑–≤–∞–Ω–∏–µ]" –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è "---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---".`;

    return megaPrompt;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –º–µ–≥–∞-–æ—Ç–≤–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  private formatDailySummaryFromMegaResponse(
    megaResponse: string,
    articlesBySector: Record<string, any[]>,
    sectorNamesMap: Map<number, string>,
    totalArticles: number
  ): string {
    const timestamp = new Date().toLocaleString('ru-RU');
    
    let report = `üìä *–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π* üìä\n`;
    report += `üïê –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: ${timestamp}\n`;
    report += `üì∞ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${totalArticles}\n`;
    report += `üè¢ –û—Ö–≤–∞—á–µ–Ω–æ —Å–µ–∫—Ç–æ—Ä–æ–≤: ${Object.keys(articlesBySector).length}\n\n`;

    // –†–∞–∑–±–∏—Ä–∞–µ–º –º–µ–≥–∞-–æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
    const sectorResponses = this.parseMegaResponse(megaResponse);

    Object.entries(articlesBySector).forEach(([sectorId, articles]) => {
      const sectorName = sectorNamesMap.get(parseInt(sectorId)) || `–°–µ–∫—Ç–æ—Ä ${sectorId}`;
      const sectorSummary = sectorResponses[sectorName] || 
        sectorResponses[sectorName.toUpperCase()] || 
        `–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–∫—Ç–æ—Ä—É ${sectorName} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üîÑ`;

      report += `üè¢ *${sectorName}* (${articles.length} —Å—Ç–∞—Ç–µ–π)\n`;
      report += `${sectorSummary}\n\n`;
      report += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
    });

    report += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è*: –î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ!\n`;

    return report;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –º–µ–≥–∞-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
   */
  private parseMegaResponse(megaResponse: string): Record<string, string> {
    const sectorResponses: Record<string, string> = {};
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–°–ï–ö–¢–û–†: [–Ω–∞–∑–≤–∞–Ω–∏–µ]" –∏ "---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---"
    const sectorRegex = /–°–ï–ö–¢–û–†:\s*([^]+?)---–ö–û–ù–ï–¶ –°–ï–ö–¢–û–†–ê---/gi;
    let match;

    while ((match = sectorRegex.exec(megaResponse)) !== null) {
      const fullMatch = match[1];
      const lines = fullMatch.split('\n');
      
      if (lines.length > 0) {
        const sectorName = lines[0].trim();
        const content = lines.slice(1).join('\n').trim();
        
        if (sectorName && content) {
          sectorResponses[sectorName] = content;
        }
      }
    }

    return sectorResponses;
  }
}