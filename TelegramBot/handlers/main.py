from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from keyboards.filters import KeyboardFilters
from keyboards.sectors import get_search_keyboard, get_sectors_keyboard
from config import SectorSearch, STICKER_SHUT_UP, STICKER_HELLO
from database.crud import get_sectors, get_user_sectors, get_user, update_user_notifications
from aiogram.exceptions import TelegramBadRequest
from handlers.sectors import cmd_sectors
from aiogram import F


async def process_notifications_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await message.answer(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å {status}.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user.notifications else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications"
            )]
        ])
    )

async def process_notifications_toggle(callback: types.CallbackQuery):
    print(1)
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    new_status = not user.notifications
    await update_user_notifications(callback.from_user.id, new_status)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    await callback.message.reply_sticker(sticker=f"{STICKER_SHUT_UP if not new_status else STICKER_HELLO}")
    await callback.message.edit_text(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if new_status else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications"
            )]
        ])
    )
    await callback.answer()

async def process_common_callbacks(callback: types.Message, state: FSMContext):
    print("toggle notificateions")
    if callback.data == "toggle_notifications":
        await process_notifications_toggle(callback)
        return

    state_data = await state.get_data()
    mode = state_data.get("mode", "select")
    sectors = await get_sectors()
    user_sectors = await get_user_sectors(callback.from_user.id)

    if callback.data == "search_sectors":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_search_keyboard()
        )
        await state.set_state(SectorSearch.waiting_for_query)
        await callback.answer()
        return

    if callback.data == "clear_filters":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        filters = state_data.get("filters")
        if filters:
            filters = KeyboardFilters(**filters)
            filters.clear()
            await state.update_data(**filters.__dict__)
        
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Å–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—Ç–æ—Ä–æ–≤.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ–∫—Ç–æ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            reply_markup=get_sectors_keyboard(sectors, user_sectors, prefix=f"{mode}_", page=1)
        )
        await callback.answer()
        return

    if callback.data == "cancel_search":
        await state.set_state(None)
        sectors = await get_sectors()
        user_sectors = await get_user_sectors(callback.from_user.id)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Å–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—Ç–æ—Ä–æ–≤.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–µ–∫—Ç–æ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            reply_markup=get_sectors_keyboard(sectors, user_sectors, prefix=f"{mode}_", page=1)
        )
        await callback.answer()
        return
    
    if callback.data == "back_to_sectors":
        await cmd_sectors(callback.message)
        await callback.answer()
        return

    if callback.data == "ignore":
        await callback.answer()
        return
    
    

    if callback.data.startswith(("prev-page:", "next-page:")):
        page = int(callback.data.split(":")[1])
        sectors = await get_sectors()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        filters = KeyboardFilters(**state_data["filters"]) if state_data.get("filters") else KeyboardFilters()
        
        try:
            await callback.message.edit_reply_markup(
                reply_markup=get_sectors_keyboard(sectors, user_sectors, page=page, prefix=f"{mode}_", filters=filters)
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    

def register_main_handlers(dp: Dispatcher):
    dp.message.register(process_notifications_button, F.text == "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
    dp.callback_query.register(process_common_callbacks)