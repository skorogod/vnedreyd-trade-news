from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from database.crud import get_sectors, get_sector, get_user_sectors
from keyboards.reports import get_sectors_report_keyboard
from keyboards.main import get_main_keyboard
from keyboards.sectors import get_sectors_keyboard
from aiogram.fsm.context import FSMContext
from services.report_service import report_service

async def get_sector_report(sector_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Å–µ–∫—Ç–æ—Ä—É"""
    report = await report_service.get_sector_report(sector_id)
    if report:
        return report
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def get_daily_report() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
    report = await report_service.get_daily_summary()
    if report:
        return (
            f"{report['content']}\n\n"
            f"–ü–µ—Ä–∏–æ–¥: {report['timeRangeStart']} - {report['timeRangeEnd']}"
        )
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def cmd_reports(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç—á–µ—Ç–æ–≤"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def process_report_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç'"""
    state.clear()
    await state.set_data({"mode": "report"})
    sectors = await get_sectors()
    user_id = message.from_user.id
    selected_sectors = await get_user_sectors(user_id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_sectors_keyboard(sectors, page=1, selected_sectors=selected_sectors, prefix="report_")
    )

async def process_daily_report_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç'"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    report = await get_daily_report()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await message.answer(
        f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n{report}"
    )

async def process_sector_report(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    if not callback.data.startswith("report_"):
        return

    if callback.data == "report_ignore":
        await callback.answer()
        return

    if callback.data.startswith(("report_prev-page:", "report_next-page:")):
        page = int(callback.data.split(":")[1])
        sectors = await get_sectors()
        try:
            await callback.message.edit_reply_markup(
                reply_markup=get_sectors_report_keyboard(sectors, page=page)
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return

    if callback.data.startswith("report_sector:"):
        sector_id = int(callback.data.split(":")[1])
        sector = await get_sector(sector_id)
        
        if not sector:
            await callback.answer("–°–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
        report = await get_sector_report(sector_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await callback.message.edit_text(
            f"üìä –û—Ç—á–µ—Ç –ø–æ —Å–µ–∫—Ç–æ—Ä—É: {sector.name}\n\n{report}"
        )
        await callback.answer()

def register_reports_handlers(dp: Dispatcher):
    dp.message.register(cmd_reports, Command(commands=["reports"]))
    dp.message.register(process_report_button, F.text == "üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
    dp.message.register(process_daily_report_button, F.text == "üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
    dp.callback_query.register(process_sector_report) 