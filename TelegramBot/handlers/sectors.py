from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from database.crud import update_user_sectors, get_user, get_sectors, get_user_sectors, delete_user_sector
from keyboards.sectors import get_sectors_keyboard, get_selected_sectors_keyboard, get_search_keyboard
from keyboards.filters import KeyboardFilters
from aiogram.fsm.context import FSMContext



async def economic_sectors_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É economic sectors'"""
    await state.clear()
    await state.set_data({"mode": "select"})
    sectors = await get_sectors()
    user_id = message.from_user.id
    selected_sectors = await get_user_sectors(user_id)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Å–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏:",
        reply_markup=get_sectors_keyboard(sectors, page=1, selected_sectors=selected_sectors, prefix="select_")
    )


async def cmd_sectors(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    sectors = await get_sectors()
    user_sectors = await get_user_sectors(message.from_user.id)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Å–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏.\n"
        "–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—Ç–æ—Ä–æ–≤.\n",
        reply_markup=get_sectors_keyboard(sectors, user_sectors, page=1, prefix="select_")
    )

async def process_sector_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞"""
    user_id = callback.from_user.id
    user = await get_user(user_id)
    user_sectors = await get_user_sectors(user_id)

    sectorId = int(callback.data.split(":")[1])
    
    if not user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–µ–∫—Ç–æ—Ä
    is_selected = sectorId in user_sectors
    
    if is_selected:
        # –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        sector = await delete_user_sector(user_id, sectorId)
        if sector:
            await callback.answer(f"–°–µ–∫—Ç–æ—Ä {sector.name} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
        else:
            await callback.answer("–°–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        # –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        sector = await update_user_sectors(user_id, sectorId)
        if sector:
            await callback.answer(f"–°–µ–∫—Ç–æ—Ä {sector.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
        else:
            await callback.answer("–°–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = 1
    if callback.message.reply_markup:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data.startswith("prev-page:"):
                    current_page = int(button.callback_data.split(":")[1]) + 1
                    break
                elif button.callback_data.startswith("next-page:"):
                    current_page = int(button.callback_data.split(":")[1]) - 1
                    break
            if current_page != 1:
                break

    try:
        sectors = await get_sectors()
        selected_sectors = await get_user_sectors(user_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        filters = KeyboardFilters(**state_data["filters"]) if state_data.get("filters") else KeyboardFilters()
        
        await callback.message.edit_reply_markup(
            reply_markup=get_sectors_keyboard(sectors, selected_sectors, page=current_page, filters=filters, prefix="select_")
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise


async def show_selected_sectors(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    if not user.sectors:
        await message.answer(
            "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sectors –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤."
        )
        return

    sectors_text = "\n".join([f"‚Ä¢ {sector.name}" for sector in user.sectors])
    await message.answer(
        "–í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã:\n\n" + sectors_text + "\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sectors –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞.",
        reply_markup=get_selected_sectors_keyboard(user.sectors)
    )

def register_sectors_handlers(dp: Dispatcher):
    dp.message.register(cmd_sectors, Command(commands=["sectors"]))
    dp.message.register(show_selected_sectors, Command(commands=["my_sectors"]))
    dp.callback_query.register(process_sector_selection, lambda c: c.data.startswith("select_"))
    dp.message.register(economic_sectors_button, F.text == "üìù –°–µ–∫—Ç–æ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏")