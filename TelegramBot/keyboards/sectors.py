from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from database.models import Sector
from typing import List, Tuple
from database.crud import get_sectors, get_user_sectors
from .filters import KeyboardFilters
from aiogram.fsm.context import FSMContext

ITEMS_PER_PAGE = 5


def get_sectors_for_page(sectors: List[Sector], page: int) -> Tuple[List[Sector], int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ç–æ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    start_idx = (page - 1) * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    total_pages = (len(sectors) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    return sectors[start_idx:end_idx], total_pages

def get_sectors_keyboard(sectors: List[Sector], selected_sectors: List[int] = None, page: int = 1, filters: KeyboardFilters = None, prefix=None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º"""
    keyboard = []
    
    if filters is None:
        filters = KeyboardFilters()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–∫—Ç–æ—Ä—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if filters.sector:
        sectors = [s for s in sectors if filters.sector.lower() in s.name.lower()]
    
        if len(sectors) == 0:
            keyboard.append([
            InlineKeyboardButton(
                text=f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                callback_data="ignore"
            ),
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤",
                callback_data=f"search_sectors"
            ),
            InlineKeyboardButton(
                text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                callback_data=f"clear_filters"
            )
        ])
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—Ç–æ—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    if selected_sectors:
        sectors = sorted(sectors, key=lambda x: x.id not in selected_sectors)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_sectors, total_pages = get_sectors_for_page(sectors, page)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
    keyboard.append([
        InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ —Å–µ–∫—Ç–æ—Ä–æ–≤",
            callback_data=f"search_sectors"
        )
    ])

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
    if filters.has_filters():
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                callback_data=f"clear_filters"
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ç–æ—Ä—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for sector in current_sectors:
        selectedPrefix = "‚úÖ " if sector.id in selected_sectors else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{selectedPrefix}{sector.name}",
                callback_data=f"{prefix if prefix else ""}sector:{sector.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"prev-page:{page-1}"
            )
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data="ignore"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"next-page:{page+1}"
            )
        )
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
    #keyboard.append([
    #    InlineKeyboardButton(
    #        text="üìã –ú–æ–∏ —Å–µ–∫—Ç–æ—Ä—ã",
    #        callback_data="show_selected"
    #    )
    #])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_search_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
            callback_data="cancel_search"
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_selected_sectors_keyboard(selected_sectors: List[Sector]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤"""
    keyboard = []
    
    for sector in selected_sectors:
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {sector.name}",
                callback_data=f"sector:{sector.name}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–æ–≤
    keyboard.append([
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–æ–≤",
            callback_data="back_to_sectors"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 