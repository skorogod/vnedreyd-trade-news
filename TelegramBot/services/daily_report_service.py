import asyncio
import logging
from datetime import datetime, time
from aiogram import Bot
from database.crud import get_user, get_all_users
from services.report_service import report_service

class DailyReportService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.is_running = True
        while self.is_running:
            now = datetime.now().time()
            target_time = time(8, 30)  # 8:30 —É—Ç—Ä–∞
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            if now > target_time:
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                seconds_until_next = (24 * 3600) - (
                    (now.hour * 3600 + now.minute * 60 + now.second) -
                    (target_time.hour * 3600 + target_time.minute * 60)
                )
                await asyncio.sleep(seconds_until_next)
            else:
                # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                seconds_until_target = (
                    (target_time.hour * 3600 + target_time.minute * 60) -
                    (now.hour * 3600 + now.minute * 60 + now.second)
                )
                await asyncio.sleep(seconds_until_target)

            # –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ—Ç—á–µ—Ç
            await self.send_daily_reports()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.is_running = False

    async def send_daily_reports(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
            report = await report_service.get_daily_summary()
            if not report:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
                f"{report['content']}\n\n"
                f"–ü–µ—Ä–∏–æ–¥: {report['timeRangeStart']} - {report['timeRangeEnd']}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º –æ—Ç—á–µ—Ç
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é get_all_users –≤ database/crud.py
            users = await get_all_users()
            for user in users:
                try:
                    await self.bot.send_message(
                        user.user_id,
                        message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
daily_report_service = None

def init_daily_report_service(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    global daily_report_service
    daily_report_service = DailyReportService(bot)
    return daily_report_service 