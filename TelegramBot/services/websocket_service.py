import json
import logging
import asyncio
import socketio
from aiogram import Bot
from config import settings
from database.crud import get_users_by_sectors, get_user
from helpers import get_sticker

class WebSocketClient:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.sio = socketio.AsyncClient()
        self.connected = False

        print("socket url", settings.WEBSOCKET_URL)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        @self.sio.event
        async def connect():
            self.connected = True
            logging.info("Socket.IO connected successfully")
            
        @self.sio.event
        async def disconnect():
            self.connected = False
            logging.info("Socket.IO disconnected")
            
        @self.sio.on('article')
        async def on_article(data):
            await self.process_new_article(data)

    async def connect(self):
        while True:
            try:
                await self.sio.connect(settings.WEBSOCKET_URL)
                await self.sio.wait()
            except Exception as e:
                logging.error(f"Socket.IO connection error: {e}")
                self.connected = False
                await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º


    async def process_new_article(self, data: dict):
        try:
            print("Received article data:", data)
            
            sectors = data.get("sectors")
            score = data.get("score")

            if not len(sectors):
                logging.warning("No sector found in news data")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–æ–º
            users = await get_users_by_sectors(sectors)

            for user in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not user.notifications:
                    continue

                try:
                    message = (
                        f"üì∞–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å!!!"
                        f"{data.get('content', '')}\n\n"
                        f"<a href='{data.get('link', '')}'>–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
                    )
                    
                    if score:
                        sticker = get_sticker(score)
                    else:
                        sticker = None

                    if sticker:
                        await self.bot.send_sticker(user.user_id, sticker=sticker) 

                    await self.bot.send_message(
                        user.user_id,
                        message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logging.error(f"Error sending message to user {user.user_id}: {e}")
        except Exception as e:
            logging.error(f"Error processing message: {e}")

    async def start(self):
        await self.connect() 